---
- name: Install software
  apt:
    update_cache: yes
    name:
      - openvpn
      - golang-cfssl
      - sudo
      - whois
- name: Install software
  apt:
    update_cache: yes
    name:
      - znc
  when: "znc == 'yes'"

- name: Make vpn bundle dirs
  file:
    name: "{{ item }}"
    state: directory
  with_items:
    - /root/vpn
    - /root/vpn/certs
    - /root/vpn/config

- name: Make znc bundle dirs
  file:
    name: "{{ item }}"
    state: directory
  with_items:
    - /root/znc
    - /root/znc/certs
    - /root/znc/config
  when: "znc == 'yes'"

- name: Install cfssl CSR config file
  template:
    src: templates/csr.json.j2
    dest: /root/vpn/config/csr.json
  vars:
    cert_cn: VPN CA
- name: Install cfssl CA config file
  template:
    src: templates/ca.json.j2
    dest: /root/vpn/config/ca.json
- name: Generate SSL CA
  shell: cfssl genkey -initca /root/vpn/config/csr.json | cfssljson -bare /root/vpn/certs/ca
  args:
    creates: /root/vpn/certs/ca.pem
- name: Install cfssl CSR config file
  template:
    src: templates/csr.json.j2
    dest: /root/vpn/config/csr-server.json
  vars:
    cert_cn: VPN server
- name: Generate SSL server
  shell: cfssl gencert -ca=/root/vpn/certs/ca.pem -ca-key=/root/vpn/certs/ca-key.pem \
         -config=/root/vpn/config/ca.json -profile="server" -hostname="server" \
         /root/vpn/config/csr-server.json | cfssljson -bare /root/vpn/certs/server
  args:
    creates: /root/vpn/certs/server.pem
- name: Install cfssl CSR config file
  template:
    src: templates/csr.json.j2
    dest: /root/vpn/config/csr-client.json
  vars:
    cert_cn: VPN client
- name: Generate SSL client
  shell: cfssl gencert -ca=/root/vpn/certs/ca.pem -ca-key=/root/vpn/certs/ca-key.pem \
         -config=/root/vpn/config/ca.json -profile="client" -hostname="client" \
         /root/vpn/config/csr-client.json | cfssljson -bare /root/vpn/certs/client
  args:
    creates: /root/vpn/certs/client.pem
- name: Install cfssl CSR config file
  template:
    src: templates/csr.json.j2
    dest: /root/vpn/config/csr-phone.json
  vars:
    cert_cn: VPN phone
- name: Generate SSL client for phone
  shell: cfssl gencert -ca=/root/vpn/certs/ca.pem -ca-key=/root/vpn/certs/ca-key.pem \
         -config=/root/vpn/config/ca.json -profile="phone" -hostname="phone" \
         /root/vpn/config/csr-phone.json | cfssljson -bare /root/vpn/certs/phone
  args:
    creates: /root/vpn/certs/phone.pem
- name: Generate DH params
  command: openssl dhparam -out /root/vpn/certs/dh2048.pem 2048
  args:
    creates: /root/vpn/certs/dh2048.pem
- name: Generate tls auth key
  command: openvpn --genkey --secret /root/vpn/certs/ta.key
  args:
    creates: /root/vpn/certs/ta.key

- block:
  - name: Install cfssl CSR config file
    template:
      src: templates/znc-csr.json.j2
      dest: /root/znc/config/csr.json
  - name: Install cfssl CA config file
    template:
      src: templates/znc-ca.json.j2
      dest: /root/znc/config/ca.json
  - name: Generate SSL CA
    shell: cfssl genkey -initca /root/znc/config/csr.json | cfssljson -bare /root/znc/certs/ca
    args:
      creates: /root/znc/certs/ca.pem
  - name: Generate SSL server
    shell: cfssl gencert -ca=/root/znc/certs/ca.pem -ca-key=/root/znc/certs/ca-key.pem \
           -config=/root/znc/config/ca.json -profile="server" -hostname="znc.jbaublitz.me" \
           /root/znc/config/csr.json | cfssljson -bare /root/znc/certs/server
    args:
      creates: /root/znc/certs/server.pem
  - name: Generate DH params
    command: openssl dhparam -out /root/znc/certs/dh2048.pem 2048
    args:
      creates: /root/znc/certs/dh2048.pem
  when: "znc == 'yes'"

- name: Make openvpn user
  user:
    name: openvpn
    create_home: no
    password: "!"
    shell: /usr/sbin/nologin
- name: Make keys/ directory in /etc/openvpn/server
  file:
    name: /etc/openvpn/server/keys
    state: directory
- name: Copy necessary private keys to /etc/openvpn/server
  copy:
    remote_src: yes
    src: "{{ item }}"
    dest: /etc/openvpn/server/keys
    mode: 0600
    owner: openvpn
    group: openvpn
  with_items:
    - /root/vpn/certs/server-key.pem
    - /root/vpn/certs/dh2048.pem
    - /root/vpn/certs/ta.key
- name: Copy necessary public keys to /etc/openvpn/server
  copy:
    remote_src: yes
    src: "{{ item }}"
    dest: /etc/openvpn/server/keys
    mode: 0644
    owner: openvpn
    group: openvpn
  with_items:
    - /root/vpn/certs/server.pem
    - /root/vpn/certs/ca.pem
- name: Generate OpenVPN config file
  template:
    src: templates/openvpn.conf.j2
    dest: /etc/openvpn/server.conf
  notify: 
    - Restart OpenVPN
- name: OpenVPN server
  systemd:
    name: openvpn@server
    state: started
- name: sysctl ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
- name: Add iptables masquerade
  iptables:
    action: append
    chain: POSTROUTING
    table: nat
    out_interface: eth0
    jump: MASQUERADE

# WARNING: Enabling passwordless sudo is not yet a good idea
# WARNING: sudo rules will be added eventually
#- name: Passwordless sudo
#  lineinfile:
#    line: %admin ALL=(ALL:ALL) NOPASSWD:ALL
#    create: yes
#    dest: /etc/sudoers.d/admin
#    mode: 0440
- name: Generate temp password for admin user
  shell: echo {{ temppass | mandatory }} | mkpasswd -P 0 --method=sha-512
  register: password_output
- name: Create admin user
  user:
    state: present
    shell: /bin/bash
    name: "{{ lookup('env', 'USER') }}"
    password: "{{ password_output.stdout }}"
    groups: admin
- name: Add ssh key to admin user
  lineinfile:
    line: "{{ lookup('file', ssh_public_key_file) }}"
    create: yes
    dest: "/home/{{ lookup('env', 'USER') }}/.ssh/authorized_keys"

- name: Generate client OpenVPN config file
  template:
    src: templates/openvpn-client.conf.j2
    dest: /root/openvpn.conf
- name: Read cert files for inlining
  slurp:
    src: /root/vpn/certs/ca.pem
  register: phone_ca
- name: Read cert files for inlining
  slurp:
    src: /root/vpn/certs/phone.pem
  register: phone_cert
- name: Read cert files for inlining
  slurp:
    src: /root/vpn/certs/phone-key.pem
  register: phone_key
- name: Read cert files for inlining
  slurp:
    src: /root/vpn/certs/ta.key
  register: tls_auth
- name: Generate phone client OpenVPN config file
  template:
    src: templates/openvpn-client-phone.conf.j2
    dest: /root/openvpn-phone.conf
- name: Copy OpenVPN files to local host
  fetch:
    src: "{{ item }}"
    dest: "{{ lookup('env', 'HOME') }}/"
    flat: yes
  with_items:
    - /root/openvpn.conf
    - /root/openvpn-phone.conf
    - /root/vpn/certs/ca.pem
    - /root/vpn/certs/client.pem
    - /root/vpn/certs/client-key.pem
    - /root/vpn/certs/ta.key
- name: sshd listen address
  lineinfile:
    path: /etc/ssh/sshd_config
    line: "{{ item }}"
    state: present
  notify: Restart sshd
  with_items:
    - ListenAddress 10.10.10.1
    - PermitRootLogin no
